#!/usr/bin/wish

package require BLT

#set images(normal) [image create photo -format gif -data {
#    R0lGODlhEAANAMIAAAAAAH9/f///////AL+/vwAA/wAAAAAAACH5BAEAAAUALAAAAAAQAA0A
#    AAM1WBrM+rAEMigJ8c3Kb3OSII6kGABhp1JnaK1VGwjwKwtvHqNzzd263M3H4n2OH1QBwGw6
#    nQkAOw==
#} ]

#Red dot image
set images(normal) [image create photo -format gif -data {
R0lGODlhDAAMANUAAPUAAO0EBOsFBeYICOQJCeIKCtwNDdoODsIaGsAbG74cHLoeHrgfH7YgILQh
IbAjI25FRWhISGRKSmJLS2BMTF1OTvv7+/n5+ff39/X19e3t7enp6ePj47a2trKysrCwsKysrKqq
qqioqH19fXt7e3l5eXNzc3FxcW9vb21tbWtra2lpaWdnZ11dXVlZWVVVVVNTU////wAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAADEALAAAAAAMAAwAAAZjwFgs
A1rBYKkPRhjjsI5QmGozNEoUhMKCAkNdRDCIAEAGDCIwjxFRLjNgpmOgTS7AXC/YmG5vnWAJdAAN
MCQhMBEDbQUTMB0YKjAUDgYHDxUwJxYxG5FRmRpMFx8lRyMdmzFBADs=
} ]

#set images(active) [image create photo -format gif -data {
#    R0lGODlhEAANAMIAAAAAAH9/f/////+/AL+/vwAA/wAAAAAAACH5BAEAAAUALAAAAAAQAA0A
#    AAM8WBrM+rAEQWmIb5KxiWjNInCkV32AJHRlGQBgDA7vdN4vUa8tC78qlrCWmvRKsJTquHkp
#    ZTKAsiCtWq0JADs=
#} ]

#Green dot image
set images(active) [image create photo -format gif -data {
R0lGODlhDAAMANUAAADIAATCBAXBBQi9CAm8CQq6Cg22DQ61DhqjGhuhGxygHB6dHh+cHyCbICGZ
ISOWI0VmRUhiSEpfSkteS0xdTE5aTvv7+/n5+ff39/X19e3t7enp6ePj47a2trKysrCwsKysrKqq
qqioqH19fXt7e3l5eXNzc3FxcW9vb21tbWtra2lpaWdnZ11dXVlZWVVVVVNTU////wAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAADEALAAAAAAMAAwAAAZjwFgs
A1rBYKkPRhjjsI5QmGozNEoUhMKCAkNdRDCIAEAGDCIwjxFRLjNgpmOgTS7AXC/YmG5vnWAJdAAN
MCQhMBEDbQUTMB0YKjAUDgYHDxUwJxYxG5FRmRpMFx8lRyMdmzFBADs=
} ]

set plotcolors [list darkblue darkred darkgreen darkorange darkmagenta darkcyan darkgrey black blue red green orange magenta cyan grey]
set plotcolor 0
#array set plotVals [


proc loadBT5File  {fileName x c cr t m cn br bl fr fl} {
	global datasets
	global $x $c $cr $t $m $cn $br $bl $fr $fl

	#puts "In load proc: $x $c $cr $t $m $cn $br $bl $fr $fl"

	set lc 0
	set mon(0) 0
	set det1(0) 0
	set det2(0) 0
	set det3(0) 0
	set det4(0) 0
	set det5(0) 0
	set xvar(0) 0
	set trans(0) 0

	if [catch {open $fileName r} fileId] {

		puts stderr "Cannot open file for reading: $fileId"

	} else {
		for {set lc 0} {$lc < 13} {incr lc} {
			gets $fileId line
			if { $lc == 0 } {
				regexp {^\'.+?\' \'.+?\' \'.+?\'.+?(\d+)\..+} $line match counttime
			}
		}	

		set lc 0
		while true {
			if {[gets $fileId line] < 0} {
				break
			} else {
				regexp {^ +([^ ]+).*} $line match xvar($lc)
			}

			gets $fileId line
			regexp {^ (.+?),(.+?),(.+?),(.+?),(.+?),(.+?),(.+?),.*} $line match mon($lc) \
					det2($lc) det1($lc) trans($lc) det3($lc) det4($lc) det5($lc)
			incr lc
		}

		close $fileId
	}

	foreach index [lsort -integer [array names xvar]] {
	    $x append {$xvar($index)}
	    $c append {$det1($index)+$det2($index)+$det3($index)+$det4($index)+$det5($index)}
	    $cr append [expr [$c index $index] / $counttime]
	    $t append {$trans($index)}
	    $m append {$mon($index)}
	    $cn append {$det2($index)}
	    $bl append {$det1($index)}
	    $br append {$det3($index)}
	    $fl append {$det4($index)}
	    $fr append {$det5($index)}

	}

}

proc resetGraph { } {
	global graph
	global tv
	global images
	global plotcolor
	global transvar
	global sumvar
	global monvar
	global num4var

	set plotcolor 0	

	foreach elem [ $graph element show] {
	
	    if { [string equal $elem "valMarker"] != 1} {
	    	$graph element delete $elem
	   
		set xvec [join "$elem _xvec" ""]
	    	set countratevec [join "$elem _countratevec" ""]
	    	set countvec [join "$elem _countvec" ""]
	    	set transvec [join "$elem _transvec" ""]
	    	set monvec [join "$elem _monvec" ""]
	    	set cvec [join "$elem _cvec" ""]
	    	set brvec [join "$elem _brvec" ""]
	    	set blvec [join "$elem _blvec" ""]
	    	set frvec [join "$elem _frvec" ""]
	    	set flvec [join "$elem _flvec" ""]
	
	    	global $xvec $countvec $countratevec $transvec $monvec
	    	global $cvec $brvec $blvec $frvec $flvec
	    
	    	blt::vector destroy $xvec
	    	blt::vector destroy $countratevec
	    	blt::vector destroy $countvec
	    	blt::vector destroy $transvec 
	    	blt::vector destroy $monvec
	    	blt::vector destroy $cvec
	    	blt::vector destroy $brvec
	    	blt::vector destroy $blvec
	    	blt::vector destroy $frvec
	    	blt::vector destroy $flvec
	    } else {
		clearValMarks
	    }
	}
	
	$tv entry configure all -activeicons "$images(normal) $images(normal)"
	$tv entry configure all -icons "$images(normal) $images(normal)"
}

#foreach fileName $argv {
proc addremovePlot { nodeID } {
	global graph
	global tv
	global images
	global .tree
	global plotType
	global plotcolors
	global plotcolor
	global useColors
	global valMarkElem
	
	set fileName [.tree label $nodeID]	
	#puts "$nodeID $fileName" 	
	set filebase [string trimright $fileName .bt5]

	if { ! [$graph element exists $filebase] } {

		$tv entry configure $nodeID -activeicons "$images(active) $images(active)"
		$tv entry configure $nodeID -icons "$images(active) $images(active)" 

		set xvec [join "$filebase _xvec" ""]
		set countratevec [join "$filebase _countratevec" ""]
		set countvec [join "$filebase _countvec" ""]
		set transvec [join "$filebase _transvec" ""]
		set monvec [join "$filebase _monvec" ""]
		set cvec [join "$filebase _cvec" ""]
		set brvec [join "$filebase _brvec" ""]
		set blvec [join "$filebase _blvec" ""]
		set frvec [join "$filebase _frvec" ""]
		set flvec [join "$filebase _flvec" ""]
	
		global $xvec $countvec $countratevec $transvec $monvec
		global $cvec $brvec $blvec $frvec $flvec
	
		blt::vector create $xvec
		blt::vector create $countratevec
		blt::vector create $countvec
		blt::vector create $transvec 
		blt::vector create $monvec
		blt::vector create $cvec
		blt::vector create $brvec
		blt::vector create $blvec
		blt::vector create $frvec
		blt::vector create $flvec


		loadBT5File $fileName $xvec $countvec $countratevec $transvec $monvec $cvec $brvec $blvec $frvec $flvec



		$graph element create $filebase -symbol scross \
			-xdata $xvec  \
			-ydata $countvec 

		if {$useColors} {
			set pcol [lindex $plotcolors $plotcolor]
			
			$graph element configure $filebase -outline $pcol -color $pcol
		
			incr plotcolor
			if { $plotcolor >= [llength $plotcolors] } { set plotcolor 0}
		}

		switch -exact $plotType {
		    count { $graph element configure $filebase -ydata $countvec}
		    countrate { $graph element configure $filebase -ydata $countratevec}
		    trans { $graph element configure $filebase -ydata $transvec}
		    mon { $graph element configure $filebase -ydata  $monvec}
		    central { $graph element configure $filebase -ydata  $cvec}
		    backl {$graph element configure $filebase -ydata $blvec}
		    backr {$graph element configure $filebase -ydata $brvec}
		    frontl {$graph element configure $filebase -ydata $flvec}
		    frontr {$graph element configure $filebase -ydata $frvec}
		}

	} else {
	    $tv entry configure $nodeID -activeicons "$images(normal) $images(normal)"
	    $tv entry configure $nodeID -icons "$images(normal) $images(normal)"		
	
	    $graph element delete $filebase
	    if { [string equal $filebase $valMarkElem] == 1 } {
		$graph element delete valMarker
		clearValMarks
	    }
	
	    set xvec [join "$filebase _xvec" ""]
	    set countratevec [join "$filebase _countratevec" ""]
	    set countvec [join "$filebase _countvec" ""]
	    set transvec [join "$filebase _transvec" ""]
	    set monvec [join "$filebase _monvec" ""]
	    set cvec [join "$filebase _cvec" ""]
	    set brvec [join "$filebase _brvec" ""]
	    set blvec [join "$filebase _blvec" ""]
	    set frvec [join "$filebase _frvec" ""]
	    set flvec [join "$filebase _flvec" ""]
	
	    global $xvec $countvec $transvec $monvec
	    global $cvec $brvec $blvec $frvec $flvec
	
		blt::vector destroy $xvec
		blt::vector destroy $countratevec
		blt::vector destroy $countvec
		blt::vector destroy $transvec 
		blt::vector destroy $monvec
		blt::vector destroy $cvec
		blt::vector destroy $brvec
		blt::vector destroy $blvec
		blt::vector destroy $frvec
		blt::vector destroy $flvec	
	
	}
}

proc changePlotType {elem} {
	global graph
	global plotType

    set xvec [join "$elem _xvec" ""]
    set countratevec [join "$elem _countratevec" ""]
    set countvec [join "$elem _countvec" ""]
    set transvec [join "$elem _transvec" ""]
    set monvec [join "$elem _monvec" ""]
    set cvec [join "$elem _cvec" ""]
    set brvec [join "$elem _brvec" ""]
    set blvec [join "$elem _blvec" ""]
    set frvec [join "$elem _frvec" ""]
    set flvec [join "$elem _flvec" ""]

	global $xvec $countvec $transvec $monvec
    global $cvec $brvec $blvec $frvec $flvec
	
	switch -exact $plotType {
			count { $graph element configure $elem -ydata $countvec}
			countrate { $graph element configure $elem -ydata $countratevec}
			trans { $graph element configure $elem -ydata $transvec}
			mon { $graph element configure $elem -ydata  $monvec}
		    central { $graph element configure $elem -ydata  $cvec}
		    backl {$graph element configure $elem -ydata $blvec}
		    backr {$graph element configure $elem -ydata $brvec}
		    frontl {$graph element configure $elem -ydata $flvec}
		    frontr {$graph element configure $elem -ydata $frvec}
	}
}

proc changeLogLinY {} {
	global graph
	global loglinY

	$graph axis configure y -logscale $loglinY
}	

proc changeLogLinX {} {
	global graph
	global loglinX

	$graph axis configure x -logscale $loglinX
}	

proc LoadTree { tree parentNode dir } {
	cd $dir
	foreach f [lsort [glob *.bt5]] {
		set e [$tree insert $parentNode -label $f -data "Plot 0"]
	}
}

proc EmptyTree { tree } {
	$tree delete 0
}

proc selectDirectory {} {
	
	global .tree 
	
	set dir [tk_chooseDirectory -title "Set Data Directory"]

	if {$dir ne ""} {
		EmptyTree .tree
		catch { LoadTree .tree 0 $dir } result
		cd $dir
	}	
}

proc resetTree { } {

	global .tree

	EmptyTree .tree
	LoadTree .tree 0 [pwd]
}


proc filterTree { filterString } {
	
	global .tree

	resetTree
	
	if {$filterString ne ""} {
		set filterlist [.tree find 0 -glob $filterString -invert -depth 1]
		foreach node $filterlist {
			if { $node != 0 } {
				.tree delete $node
			}
		}
	}	
	
}

proc getDataVals {} {
	global pointVals
	global num4var
	global transvar
	global sumvar
	global monvar
	global valMarkElem

	global graph

	set elem [lindex [array get pointVals name] 1]
	set vecindex [lindex [array get pointVals index] 1]  
	set xval [lindex [array get pointVals x] 1]
	set yval [lindex [array get pointVals y] 1]

	set valMarkElem $elem

	if { [string length $elem] != 0 } {
	set num4var [lindex [[ join "$elem _cvec" ""] range $vecindex $vecindex] 0]
	set transvar [lindex [[ join "$elem _transvec" ""] range $vecindex $vecindex] 0]
	set sumvar [lindex [[ join "$elem _countvec" ""] range $vecindex $vecindex] 0]
	set monvar [lindex [[ join "$elem _monvec" ""] range $vecindex $vecindex] 0]

	if { [$graph element exists valMarker] == 1} {		
		$graph element configure valMarker -data "$xval $yval" 
	} else {
		$graph element create valMarker -data "$xval $yval" -symbol circle
	}
	}
}

proc clearValMarks {} {
	uplevel #0 {
		set num4var "";
		set transvar "";
		set sumvar "";
		set monvar "";
		set valMarkElem "";
		if { [$graph element exists valMarker] == 1} {
			$graph element delete valMarker
		}
	}

}

#Create menu frame
set mf [frame .mf]

# Create File menu
menubutton $mf.filemb -text File -menu $mf.filemb.fileMenu
set fm [menu $mf.filemb.fileMenu -tearoff 0]
$fm add command -label "Set Data Dir" -command selectDirectory

#Create Plot menu
menubutton $mf.plotmb -text Plot -menu $mf.plotmb.plotMenu
set pm [menu $mf.plotmb.plotMenu -tearoff 0]
$pm add cascade -label "Type" -menu $pm.type
$pm add cascade -label "X-Axis" -menu $pm.xaxis
$pm add cascade -label "Y-Axis" -menu $pm.yaxis
$pm add cascade -label "Settings" -menu $pm.settings
#Create sub menus
set xam [menu $pm.xaxis -tearoff 0]
$xam add radio -label "Lin" -variable loglinX -value "no" -command {changeLogLinX}
$xam add radio -label "Log" -variable loglinX -value "yes" -command {changeLogLinX}

set yam [menu $pm.yaxis -tearoff 0]
$yam add radio -label "Lin" -variable loglinY -value "no" -command {changeLogLinY}
$yam add radio -label "Log" -variable loglinY -value "yes" -command {changeLogLinY}

set ptm [menu $pm.type -tearoff 0]
$ptm add radio  -label "Counts" -variable plotType -value "count" -command {foreach elem [$graph element show] { changePlotType $elem  }}
$ptm add radio -label "Count Rate" -variable plotType -value "countrate" -command {foreach elem [$graph element show] { changePlotType $elem  }}
$ptm add radio -label "Trans" -variable plotType -value "trans" -command {foreach elem [$graph element show] { changePlotType $elem  }}
$ptm add radio -label "Mon" -variable plotType -value "mon" -command {foreach elem [$graph element show] { changePlotType $elem  }}
$ptm add radio -label "Central" -variable plotType -value "central" -command {foreach elem [$graph element show] { changePlotType $elem  }}
$ptm add radio -label "Back Left" -variable plotType -value "backl" -command {foreach elem [$graph element show] { changePlotType $elem  }}
$ptm add radio -label "Back Right" -variable plotType -value "backr" -command {foreach elem [$graph element show] { changePlotType $elem  }}
$ptm add radio -label "Front Left" -variable plotType -value "frontl" -command {foreach elem [$graph element show] { changePlotType $elem  }}
$ptm add radio -label "Front Right" -variable plotType -value "frontr" -command {foreach elem [$graph element show] { changePlotType $elem  }}

set psm [menu $pm.settings -tearoff 0]
$psm add check -label "Use Colors" -variable useColors -offvalue 0 -onvalue 1

#Set defaults
set loglinX "no"
set loglinY "no"
set plotType "count"
set useColors 0

#pack menubuttons into menu
pack $mf.filemb -side left
pack $mf.plotmb -side left

# Create tree
blt::tree create .tree
catch { LoadTree .tree 0 [pwd] } result

# Create view+plot frame
frame .vp
# Create treeview frame
set tvf [frame .vp.tvf]

set tv [blt::treeview $tvf.t -tree .tree -scrollmode listbox \
					-xscrollcommand "$tvf.xscroll set" \
					-yscrollcommand "$tvf.yscroll set" \
					-activeicons "$images(normal) $images(normal)" \
					-icons "$images(normal) $images(normal)"]
#$tvf.t column insert end Plot
scrollbar $tvf.xscroll -orient horizontal -command "$tvf.t xview"
scrollbar $tvf.yscroll -orient vertical -command "$tvf.t yview"

#$tvf.t bind all <ButtonPress-1> {puts stdout [.tree label [%W curselection]]}
$tvf.t bind all <ButtonPress-1> {addremovePlot [%W curselection]}

pack $tvf.xscroll -side bottom -fill x
pack $tvf.yscroll -side right -fill y
pack $tvf.t -side left -fill both -expand true
pack $tvf -side left -fill y -anchor w

# Create graph
set graph [blt::graph .vp.g -halo 30]
pack $graph -fill both -expand true -side left -anchor w

# Create filter frame
frame .filter
label .filter.filterLabel -text "Filter: "
entry .filter.filterEntry
bind .filter.filterEntry <Return> {filterTree [%W get]}

pack .filter.filterLabel -side left
pack .filter.filterEntry -side left 

#Plot controls
set pcf [frame .filter.pc]
#Clear plot button
button $pcf.filterReset -text "Clear Plot" -command {resetGraph}

pack $pcf.filterReset -side right -padx 25
pack $pcf -side right


#Data Value Display
set dvdf [frame .filter.dvd -padx 25]
pack [label $dvdf.num4lbl -text "#4: "] -side left
pack [label $dvdf.num4 -textvariable num4var] -side left
pack [label $dvdf.translbl -text "Trans: "] -side left
pack [label $dvdf.trans -textvariable transvar] -side left
pack [label $dvdf.sumlbl -text "Sum: "] -side left
pack [label $dvdf.sum -textvariable sumvar] -side left
pack [label $dvdf.monlbl -text "Mon: "] -side left
pack [label $dvdf.mon -textvariable monvar] -side left
pack $dvdf -side right -anchor s


# Pack  widgets
pack $mf -side top -anchor w
pack .vp -fill both -expand true -anchor w
pack .filter -side bottom -fill x -anchor sw

#Blt_ZoomStack $graph

bind $graph <ButtonPress-1> {
%W element closest %x %y pointVals
getDataVals 
#puts [array get pointVals name]
}




