#!/usr/bin/env python

import sys
import os
import matplotlib
matplotlib.use('GTK')

from matplotlib.figure import Figure
from matplotlib.axes import Subplot
from matplotlib.backends.backend_gtk import FigureCanvasGTK, NavigationToolbar

import usans

try:
	import pygtk
	pygtk.require("2.0")
	
except:
	pass

try:
	import gtk
	import gtk.glade
except:
	sys.exit(1)



class appGui:
	
	TARGETS = [('STRING', gtk.TARGET_SAME_APP, 0)]
	
	def __init__(self):
		
		gladefile = "bt5plot2.glade"
		self.windowname = "win_Main"
		self.wTree = gtk.glade.XML(gladefile, self.windowname)

		event_dic = {"on_win_Main_destroy" : gtk.main_quit,
					 "on_quit1_activate" : gtk.main_quit,
					 "on_set_data_dir1_activate" : self.setdatadir,
					 "on_xaxis_loglin_activate" : self.handle_xaxis_loglin,
					 "on_yaxis_loglin_activate" : self.handle_yaxis_loglin}
	#				 "on_tv_plotlist_key_press_event" : self.handle_plotlist_keypress}

		
		self.wTree.signal_autoconnect(event_dic)

		# Set up file list
		self.filelistview = self.wTree.get_widget("tv_filelist")
		
		self.filelist = gtk.ListStore(str,'gboolean',object,object,object)
		self.filelist.set_sort_column_id(0,gtk.SORT_ASCENDING)
		self.filelistview.set_model(self.filelist)

		self.cellrenderertoggle = gtk.CellRendererToggle()
		self.cellrenderertoggle.set_property('activatable', True)
		self.cellrenderertoggle.connect("toggled", self.handle_plot_toggle, self.filelist)
	
		self.AddFileListColumns()

		#fill the file list
		self.FillFileList(self.GetDirList())

		# Set up graphing widget to display xpeek data
		self.figure = Figure(figsize=(4,4), dpi=72)
		self.axis = self.figure.add_subplot(111)
		self.axis.set_xlabel('Motor position')
		self.axis.set_ylabel('Counts')
		#self.axis.set_title('XPeek')
		self.axis.grid(True)
		
		self.canvas = FigureCanvasGTK(self.figure)
		self.canvas.show()
		
		self.plotView = self.wTree.get_widget("hbox1")
		self.plotView.pack_start(self.canvas, True, True)	
		
		#self.filelistview.enable_model_drag_source( gtk.gdk.BUTTON1_MASK,
                #                                  self.TARGETS,
                #                                   gtk.gdk.ACTION_COPY)

		#self.filelistview.connect("drag_data_get", self.dnd_data_getdata)
		
		
	def AddFileListColumns(self):
		"""This function adds a column to the list view.
		First it create the gtk.TreeViewColumn and then set
		some needed properties"""
						
		column = gtk.TreeViewColumn('Filename', gtk.CellRendererText()
			, text=0)
		column.set_resizable(True)		
		column.set_sort_column_id(0)
		self.filelistview.append_column(column)

		column = gtk.TreeViewColumn('', self.cellrenderertoggle, active=1)
		self.filelistview.append_column(column)
		return
		
	def GetDirList(self):
		dirlist = os.listdir(os.getcwd())
		
		bt5list = [ x for x in dirlist if x.find('.bt5') > 0]
		
		return bt5list
		
	
	def FillFileList(self,filenames):
		self.filelist.clear()
		for filename in filenames:
			data = usans.getBT5DataFromFile(filename)
			self.filelist.append([filename,0,data,0,0])
		return
			

	def setdatadir(self, widget):
		chooser = gtk.FileChooserDialog(title="Select Data Directory",action=gtk.FILE_CHOOSER_ACTION_SELECT_FOLDER,
                                  buttons=(gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL,gtk.STOCK_OPEN,gtk.RESPONSE_OK))
		chooser.set_default_response(gtk.RESPONSE_OK)
		chooser.set_current_folder(os.getcwd())
		response = chooser.run()
		if response == gtk.RESPONSE_OK:
			os.chdir(chooser.get_filename())
			self.FillFileList(self.GetDirList())
		chooser.destroy()

	def handle_plot_toggle(self, cell, path, model):
		model[path][1] = not model[path][1]

		if model[path][1]:
			#add plot
			self.add_plot(model, path)
		else:
			#remove plot
			self.remove_plot(model, path)
		return

	def add_plot(self, model, path):
		
		xdata = []
		ydata = []

		data =  model[path][2]
		mvals =  data.keys()
		mvals.sort(usans.numeric_compare)
		for mval in mvals:
			xdata.append(mval)
			ydata.append(data[mval][1]+data[mval][2]+data[mval][4]+data[mval][5]+data[mval][6])
			
		model[path][3] = (xdata,ydata)

		model[path][4], = self.axis.plot(xdata,ydata)
		self.canvas.draw()
		return

	def remove_plot(self, model, path):

		self.axis.lines.remove(model[path][4])
		self.canvas.draw()
		return

	def handle_xaxis_loglin(self,widget):


		if (self.axis.get_xscale() == "log"):
			self.axis.set_xscale('linear')
		else:
			self.axis.set_xscale('log')		

		self.canvas.draw()
		return	

	def handle_yaxis_loglin(self,widget):


		if (self.axis.get_yscale() == "log"):
			self.axis.set_yscale('linear')
		else:
			self.axis.set_yscale('log')		

		self.canvas.draw()
		return

	#def handle_plotlist_keypress(self,widget,event):
	#	keyname = gtk.gdk.keyval_name(event.keyval)
	#	print keyname
	#	if keyname in ["Delete", "BackSpace"]:
	#		self.deleteplotlistentry(widget)
	#		
	#	return True
		
	#def deleteplotlistentry(self, treeview):
	#	treeselection = treeview.get_selection()
	#	model, iter = treeselection.get_selected()
	#	model.remove(iter)
	#	return
			

app = appGui()
gtk.main()
